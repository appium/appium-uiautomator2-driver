language: android
jdk: oraclejdk8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-6
env:
  global:
    - NODE_VERSION=8
    - _FORCE_LOGS=1
    - DEVICE=android
    - MOCHA_TIMEOUT=640000
    - RECURSIVE=
    - START_EMU=1
    - ANDROID_EMU_NAME=test
    - ANDROID_EMU_ABI=armeabi-v7a
    - ANDROID_EMU_TAG=default
    - ANDROID_BUILD_TOOLS=28.0.3
    - ANDROID_PLATFORM=android-21
    - CC=gcc-6 CXX=g++-6
    - MAX_PARALLEL=0
    - DEBUG=mocha-parallel-tests
jobs:
  include:
    - stage: tests
      if: type != cron
      env:
        - START_EMU=0
        - RECURSIVE=--recursive
        - TEST=unit
        - COVERALLS=1
    - stage:
      if: type != cron
      env: TEST=functional
      android: &android
        components:
          - platform-tools
          - tools
          - build-tools
    - stage:
      if: type != cron
      env: TEST=functional/commands
      android:
        *android
    - stage:
      if: type != cron
      env: TEST=functional/commands/keyboard
    - stage:
      if: type != cron
      env:
        - TEST=functional/commands/find
        - OPENCV=1
    - stage:
      if: type != cron
      env: TEST=functional/commands/general

    # - stage: "[CRON] Sauce Emusim tests"
    #   if: type = cron
    #   name: Basic, device 0
    #   env:
    #     - CLOUD=1
    #     - SAUCE_EMUSIM=1
    #     - PLATFORM_VERSION="8.0"
    #     - DEVICE_NAME="Android GoogleAPI Emulator"
    #     - TEST=functional/commands/general/general-e2e-specs.js
before_install:
  - |
    if [ -z ${CLOUD} ]; then
      echo y | android update sdk --no-ui -t tools
      echo yes | sdkmanager tools > /dev/null
      echo yes | sdkmanager --update > /dev/null
      echo yes | sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" > /dev/null
      echo yes | sdkmanager "extras;android;m2repository" > /dev/null
      echo yes | sdkmanager "extras;google;m2repository" > /dev/null
      if [ ${START_EMU} = "1" ]; then
        echo yes | sdkmanager "platforms;${ANDROID_PLATFORM}" > /dev/null
        export ANDROID_EMU_IMAGE="system-images;${ANDROID_PLATFORM};${ANDROID_EMU_TAG};${ANDROID_EMU_ABI}"
        for retry in 1 2 3; do
          echo yes | sdkmanager "${ANDROID_EMU_IMAGE}" > /dev/null && break
          echo "sdkmanager was not able to download the ${ANDROID_EMU_IMAGE} image (retry ${retry})"
          sleep 5
        done
        sdkmanager --list
        export TOOLS=${ANDROID_HOME}/tools
        export PATH=${ANDROID_HOME}:${ANDROID_HOME}/emulator:${TOOLS}:${TOOLS}/bin:${ANDROID_HOME}/platform-tools:${PATH}
        echo no | avdmanager create avd -k "${ANDROID_EMU_IMAGE}" -n "${ANDROID_EMU_NAME}" -f --abi "${ANDROID_EMU_ABI}" --tag "${ANDROID_EMU_TAG}" || exit 1
        emulator -avd "${ANDROID_EMU_NAME}" -no-window -camera-back none -camera-front none &
      else
        sdkmanager --list
      fi
    fi
install:
  # node stuff
  - curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash
  - nvm install $NODE_VERSION
  - node --version
  - npm --version

  - SERVER_INSTALL_ATTEMPTS=50 npm install
  - npm ls

  - |
    if [ -z ${CLOUD} ]; then
      npm install appium-test-support # get the travis emu scripts
      # for mjpeg stuff
      npm install --no-save mjpeg-consumer
    fi
before_script:
  - |
    if [ ${START_EMU} = "1" ]; then
      # make sure emulator started
      $(npm bin)/android-emu-travis-post;
    fi
    if [ ${OPENCV} = "1" ]; then
      #CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.1-Linux-x86_64.tar.gz"
      #mkdir cmake && travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      #export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      #CC=clang-5.0 CXX=clang++-5.0 npm install opencv4nodejs
      echo "Skipping opencv install for now"
    fi
    if [ ${CLOUD} = "1" ]; then
      $(npm bin)/gulp fix-mocha-parallel-tests;
      $(npm bin)/gulp periodic-output & export LONG_PID=$!;
    fi
script:
  - if [ $CLOUD = "1" ]; then
      npm run mocha -- -t 480000 --recursive build/test/$TEST;
    else
      npm run lint && npm run mocha -- -t $MOCHA_TIMEOUT -R spec $RECURSIVE build/test/$TEST -i -g @skip-ci --exit;
    fi
after_script:
  - if [-n "$LONG_PID" ]; then
      kill $LONG_PID;
    fi
after_success:
  - if [ -n "$COVERALLS" ]; then _FORCE_LOGS=0 npm run coverage; fi
after_failure:
  - |
    if [ "$TEST" != "unit" and ${CLOUD} = "0" ]; then
      echo -e "----LOGCAT----\n"
      adb logcat -d
    fi
